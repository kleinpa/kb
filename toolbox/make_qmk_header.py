import io

import matrix


def cpp_string_escape(s):
    return s.translate(str.maketrans({
        "\"": "\\\"",
        "\'": "\\\'",
        "\n": "\\n"
    }))


def make_qmk_header(kb):
    # need key -> matrix position
    # need key -> x.y position
    # are they related?

    pro_micro_pins = [
        "D3", "D2", "D1", "D0", "D4", "C6", "D7", "E6", "B4", "B5", "B6", "B2",
        "B3", "B1", "F7", "F6", "F5", "F4"
    ]

    usb_vid = "0xFEED"
    usb_pid = "0x6060"
    usb_ver = "0x0001"

    rows = set(k.controller_pin_low for k in kb.keys)
    cols = set(k.controller_pin_high for k in kb.keys)
    # assert no overlap

    manufacturer = "peterklein.dev"
    product = "quine"
    description = "quine"

    header_guard = "CONFIG_H"
    generator = "github.com/kleinpa/kb"

    # Planck
    # rows = ["D0", "D5", "B5", "B6"]
    # cols = [
    #     "F1", "F0", "B0", "C7", "F4", "F5", "F6", "F7", "D4", "D6", "B4", "D7"
    # ]

    config = {
        #/* USB Device descriptor parameter */
        "VENDOR_ID": cpp_string_escape(usb_vid),
        "PRODUCT_ID": cpp_string_escape(usb_pid),
        "DEVICE_VER": cpp_string_escape(usb_ver),
        "MANUFACTURER": cpp_string_escape(manufacturer),
        "PRODUCT": cpp_string_escape(product),
        "DESCRIPTION": cpp_string_escape(description),

        #/* key matrix size */
        "MATRIX_ROWS": len(rows),
        "MATRIX_COLS": len(cols),

        #/* key matrix pins */
        "MATRIX_ROW_PINS":
        "{" + ", ".join(pro_micro_pins[x] for x in rows) + "}",
        "MATRIX_COL_PINS":
        "{" + ", ".join(pro_micro_pins[x] for x in cols) + "}",
        "UNUSED_PINS": "",  # TODO

        #/* COL2ROW or ROW2COL */
        "DIODE_DIRECTION": "COL2ROW",

        #/* Set 0 if debouncing isn't needed */
        "DEBOUNCING_DELAY": 5,

        #/* Mechanical locking support. Use KC_LCAP, KC_LNUM or KC_LSCR instead in keymap */
        "LOCKING_SUPPORT_ENABLE": "",

        #/* Locking resynchronize hack */
        "LOCKING_RESYNC_ENABLE": "",

        #/* key combination for command */
        "IS_COMMAND()":
        "(keyboard_report->mods == (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT)))",

        #/* prevent stuck modifiers */
        "PREVENT_STUCK_MODIFIERS": "",
    }

    def key_at(r, c):
        return next(
            (f"k{i}" for i, k in enumerate(kb.keys)
             if k.controller_pin_low == r and k.controller_pin_high == c),
            "KC_NO")

    config[f"LAYOUT(" + ",".join(f"k{i}" for i, k in enumerate(kb.keys)) +
           ")"] = "{" + ",".join(
               f"{{{','.join(f'{key_at(r,c)}' for c in cols)}}}"
               for r in rows) + "}"

    fn = io.StringIO()
    print(f"#ifndef { header_guard }\n#define { header_guard }", file=fn)
    print(f"/* Generated by {generator} */", file=fn)
    print("#include \"config_common.h\"", file=fn)
    for k, v in config.items():
        print(f"#define {k} {v}", file=fn)
    print(f"#endif  // { header_guard }", file=fn)
    fn.seek(0)
    return fn.read()


def make_qmk(kb):
    pass
