import io

from toolbox.keyboard_pb2 import Keyboard

generator = "github.com/kleinpa/kb"


def cpp_string_escape(s):
    return s.translate(str.maketrans({
        "\"": "\\\"",
        "\'": "\\\'",
        "\n": "\\n"
    }))


def make_qmk_header_file(kb):

    if kb.controller != Keyboard.CONTROLLER_PROMICRO:
        raise RuntimeError(f"unknown controller")
    pro_micro_pins = [
        "D3", "D2", "D1", "D0", "D4", "C6", "D7", "E6", "B4", "B5", "B6", "B2",
        "B3", "B1", "F7", "F6", "F5", "F4"
    ]

    usb_vid = "0xFEED"
    usb_pid = "0x6060"
    usb_ver = "0x0001"

    rows = set(k.controller_pin_low for k in kb.keys)
    cols = set(k.controller_pin_high for k in kb.keys)

    if rows & cols:
        raise RuntimeError(
            f"pin in both row and column list rows={rows} cols={cols}")
    if not rows.issubset(range(len(pro_micro_pins))):
        raise RuntimeError(f"rows contains out-of-range pin rows={rows}")
    if not cols.issubset(range(len(pro_micro_pins))):
        raise RuntimeError(f"Rows contains out-of-range pin cols={cols}")

    config = {
        # USB Device descriptor
        "VENDOR_ID": cpp_string_escape(usb_vid),
        "PRODUCT_ID": cpp_string_escape(usb_pid),
        "DEVICE_VER": cpp_string_escape(usb_ver),
        "PRODUCT": cpp_string_escape(kb.name),

        # Matrix Definition
        "MATRIX_ROWS": len(rows),
        "MATRIX_ROW_PINS":
        "{" + ", ".join(pro_micro_pins[x] for x in rows) + "}",
        "MATRIX_COLS": len(cols),
        "MATRIX_COL_PINS":
        "{" + ", ".join(pro_micro_pins[x] for x in cols) + "}",
        "DIODE_DIRECTION": "COL2ROW",  # COL2ROW or ROW2COL

        # Other options
        "DEBOUNCE": 5,
    }

    def key_at(r, c):
        return next(
            (f"k{i}" for i, k in enumerate(kb.keys)
             if k.controller_pin_low == r and k.controller_pin_high == c),
            "KC_NO")

    config[f"LAYOUT(" + ",".join(f"k{i}" for i, k in enumerate(kb.keys)) +
           ")"] = "{" + ",".join(
               f"{{{','.join(f'{key_at(r,c)}' for c in cols)}}}"
               for r in rows) + "}"

    fn = io.TextIOWrapper(io.BytesIO())
    print(f"/* generated by {generator} */", file=fn)
    print(f"#pragma once", file=fn)
    print("#include \"config_common.h\"", file=fn)
    for k, v in config.items():
        print(f"#define {k} {v}", file=fn)
    fn.seek(0)
    return fn.detach()
