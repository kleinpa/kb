syntax = "proto3";

// A pose represents a position and rotation such as the location of a
// key on a keyboard.
//
// Note on controller pins:
//
// A key's controller_pin_high and controller_pin_high fields describe
// it's position in the matrix. Those fields are indexes into a
// controller's useful IO pins.
//
message Pose {
  double x = 1;
  double y = 2;
  double r = 3;
}

// A pose represents a position such as the location of a mounting
// hole on a keyboard.
message Position {
  double x = 1;
  double y = 2;
}

// Keyboard defines the abstract of a computer keyboard, including
// details about it's physical size, the type, number and position of
// keys, and the rough topology of the circuitry needed to make it all
// work.
//
// More concretely the goal is to be able to generate all the
// manufacturing artifacts required to build a keyboard, including:
//
// * Switch mounting plates
// * PCBs populated with the right outline, switches, and mounting
// * Mounting hole positions
// * Firmware header files
//
// All physical coordinates are defined in milimeters and use a
// positive-is-up-right orientation.
//
// Keymaps are outside the scope of this definition.
//
message Keyboard {
  // The name of the keyboard. This should be url-safe.
  string name = 1;

  // An optional url for more information about the described keyboard.
  string url = 13;

  message Key {
    // The location of this switch.
    Pose pose = 1;

    // The width of the key relative to the width of a standard key.
    double unit_width = 2;

    // The height of the key relative to the width of a standard key.
    double unit_height = 3;

    // The index of the controller pins this switch and it's diode
    // should be connected to.
    int32 controller_pin_high = 4;
    int32 controller_pin_low = 5;

    message Stabilizer {
      // The width of the stabilizer in keyboard units. Common values
      // include 6.25u and 2u.
      double size = 1;

      // Orientation of the stabilizer relative to the switch.
      double r = 2;
    }

    // When present, a compatible stabilizer footprint will be added
    // to plates and PCBs.
    Stabilizer stabilizer = 6;

    // Orientation of the physical switch relative to the key. This
    // may be required with long vertical keys.
    double switch_r = 7;

  }
  repeated Key keys = 2;

  // The location of mounting holes on the PCB.
  repeated Position hole_positions = 3;

  // SwitchCompatibility represents the overall switch compatibility
  // of the keyboard. This should influence both the PCB footprint and
  // plate cutout style.
  enum SwitchCompatibility {
    SWITCH_UNKNOWN = 0;

    // Compatible with Cherry MX switches and clones. Supports both
    // plate mounted and PCB-mounted stabilizers.
    SWITCH_CHERRY_MX = 1;

    // Compatible with Alps SKCM series switches and clones.
    SWITCH_ALPS = 2;

    //* Kailh PG1350 (https://deskthority.net/wiki/Kailh_PG1350_series)
    SWITCH_KAILH_PG1350 = 3;
  }
  SwitchCompatibility switch = 4;

  // OutlinePath defines the fundamental shape of the keyboard.
  //
  // Specifically this is the outline of the 'key area' of the
  // keyboard, used most directly to generate the PCB or the plate for
  // a caseless keyboard. This excludes mounting holes and
  // PCB-specific details like connector cutouts.
  //
  // A case should allow at least this much space for a PCB and a
  // normal PCB should be at most this size.
  repeated Position outline_polygon = 8;

  // The type of microcontroller used on the PCB.
  enum Controller {
    CONTROLLER_UNKNOWN = 0;

    // A "Pro Micro" compatible microcontroller with 18 IO pins.
    //
    // When controller_pose is set to the pose of top-row key, the
    // footprint will be positioned correctly so that the USB port is
    // accessable from the top of the board and the legs fit around
    // the switch.
    CONTROLLER_PROMICRO = 1;

    // STM32F072 with 35 usable IO pins. This controller uses a USB
    // Type-C connector positioned by the connector_pose field.
    CONTROLLER_STM32F072 = 2;

    // ATMEGA32U4-AU with 22 usable IO pins. This controller uses a
    // USB Type-C connector positioned by the connector_pose field.
    CONTROLLER_ATMEGA32U4 = 3;

    // ATMEGA328P-AU with 17 usable IO pins. This is a work in
    // progress and will not currently produce a working schematic.
    CONTROLLER_ATMEGA328 = 4;
  }
  Controller controller = 6;

  // The location of the microcontroller on the PCB. Depending on the
  // controller, this may need to be over or between keys.
  Pose controller_pose = 7;

  // The location of the connector on the PCB.
  Pose connector_pose = 9;

  // TODO: move this elsewhere
  double hole_diameter = 10002;

  // Position of the info text on the PCB.
  Pose info_pose = 10;

  // Identifying text that will appear in an inconspicuous place on artifacts, specifically the PCB.
  string info_text = 11;

  message QmkInfo {
    // Name of the community layout to use.
    string layout = 1;

    // Mapping of positions in the layout parameter list to key indices in the keys field above.
    repeated int32 layout_sequence = 2;
  }
  QmkInfo qmk = 12;
}
